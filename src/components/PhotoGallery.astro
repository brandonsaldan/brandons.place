---
const rotations = ['rotate-2', '-rotate-2', 'rotate-2', 'rotate-2', '-rotate-2'];

const imageData = [
    { src: '/photos/image-1.jpg', title: 'Tampa, FL', description: 'University of Tampa' },
    { src: '/photos/image-2.jpg', title: 'Saint Pete Beach, FL', description: 'Gulf of Mexico' },
    { src: '/photos/image-3.jpg', title: 'Athens, NY', description: 'Sleepy Hollow Lake' },
    { src: '/photos/image-4.jpg', title: 'Tampa, FL', description: 'Bayshore Boulevard' },
    { src: '/photos/image-5.jpg', title: 'Athens, NY', description: 'Sleepy Hollow Lake' },
    { src: '/photos/image-6.jpg', title: 'Saint Petersburg, FL', description: 'Tampa Bay' },
    { src: '/photos/image-7.jpg', title: 'Clearwater, FL', description: 'Sand Key' },
    { src: '/photos/image-8.jpg', title: 'Hudson, NY', description: 'Catskill Mountains' },
    { src: '/photos/image-9.jpg', title: 'Chapel Hill, NC', description: 'UNC Chapel Hill' },
    { src: '/photos/image-10.jpg', title: 'Saint Petersburg, FL', description: 'Spa Beach Park' },
    { src: '/photos/image-11.jpg', title: 'Clearwater, FL', description: 'Sand Key' },
    { src: '/photos/image-12.jpg', title: 'Saint Petersburg, FL', description: 'Tampa Bay' },
    { src: '/photos/image-13.jpg', title: 'Tampa, FL', description: 'The Orpheum' },
    { src: '/photos/image-14.jpg', title: 'Wilmington, DE', description: 'Wilmington Airport' },
    { src: '/photos/image-15.jpg', title: 'Atlantic Ocean', description: 'Northeast Providence Channel' },
    { src: '/photos/image-16.jpg', title: 'Pinellas Park, FL', description: 'Tampa Bay Grand Prix' },
    { src: '/photos/image-17.jpg', title: 'Tampa, FL', description: 'University of Tampa' },
    { src: '/photos/image-18.jpg', title: 'Myrtle Beach, SC', description: 'Singleton Swash Beach' },
    { src: '/photos/image-19.jpg', title: 'Krak√≥w, Poland', description: 'Wawel Cathedral' },
    { src: '/photos/image-20.jpg', title: 'New York City, NY', description: 'LaGuardia' },
    { src: '/photos/image-21.jpg', title: 'Prague, Czechia', description: 'Church of Saint Nicholas' },
    { src: '/photos/image-22.jpg', title: 'Carrboro, NC', description: 'Cat\'s Cradle' },
    { src: '/photos/image-23.jpg', title: 'Washington, DC', description: 'Rock Creek Park' },
    { src: '/photos/image-24.jpg', title: 'Budapest, Hungary', description: 'St. Stephen\'s Basilica' },
    { src: '/photos/image-25.jpg', title: 'Philadelphia, PA', description: 'Theatre of Living Arts' },
    { src: '/photos/image-26.jpg', title: 'Philadelphia, PA', description: 'The Mann Center' },
    { src: '/photos/image-27.jpg', title: 'Hudson, NY', description: 'Catskill Mountains' },
    { src: '/photos/image-28.jpg', title: 'New York City, NY', description: 'Westfield World Trade Center' },
];

const tripleImages = [...imageData, ...imageData, ...imageData];
---

<div id="gallery-container" class="mt-16 mb-10 sm:h-96 sm:mt-20">
    <div id="gallery" class="hide-scrollbar relative flex gap-5 overflow-x-hidden py-4 sm:gap-8">
        {tripleImages.map((imageItem, imageIndex) => (
            <div
                class={`group relative aspect-[9/10] w-44 flex-none overflow-hidden rounded-xl bg-zinc-100 dark:bg-zinc-800 sm:w-72 sm:rounded-2xl transition-transform duration-300 ease-out cursor-pointer ${
                    rotations[imageIndex % rotations.length]
                } hover:rotate-0 hover:scale-105`}
            >
                <img
                    src={imageItem.src}
                    alt={imageItem.title}
                    class="absolute inset-0 h-full w-full object-cover select-none transition-transform duration-300"
                    loading="lazy"
                    draggable="false"
                />
                <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/30 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 cursor-default"></div>
                <div class="absolute bottom-0 left-0 right-0 p-4 sm:p-6 translate-y-2 group-hover:translate-y-0 opacity-0 group-hover:opacity-100 transition-all duration-300 select-none">
                    <h3 class="font-serif text-white text-lg sm:text-md font-medium">{imageItem.title}</h3>
                    <p class="font-serif text-white/80 text-sm sm:text-base">{imageItem.description}</p>
                </div>
            </div>
        ))}
    </div>
</div>

<style>
    .hide-scrollbar {
        scrollbar-width: none;
        -ms-overflow-style: none;
        -webkit-overflow-scrolling: touch;
    }
    .hide-scrollbar::-webkit-scrollbar {
        display: none;
    }
</style>

<script>
    function initGallery() {
        const gallery = document.getElementById('gallery');
        const container = document.getElementById('gallery-container');
        let animationFrame: number | undefined;
        let isDragging = false;
        let startX: number;
        let scrollLeft: number;
        let lastScrollY = window.scrollY;
        let lastRelativeScroll = 0;

        if (!gallery || !container) return;

        gallery.scrollLeft = gallery.scrollWidth / 3;

        const handleScroll = () => {
            if (!gallery || !container || isDragging) return;

            const rect = container.getBoundingClientRect();
            const startOffset = window.innerHeight;
            const scrollWindow = window.innerHeight * 40;
            const scrollPosition = Math.max(0, window.scrollY - rect.top + startOffset);
            
            const scrollDelta = window.scrollY - lastScrollY;
            const scrollRatio = scrollDelta / scrollWindow;
            const singleSetWidth = gallery.scrollWidth / 3;
            
            lastRelativeScroll = (lastRelativeScroll + scrollRatio) % 1;
            if (lastRelativeScroll < 0) lastRelativeScroll += 1;
            
            gallery.scrollLeft += scrollRatio * singleSetWidth;

            if (gallery.scrollLeft >= singleSetWidth * 2) {
                gallery.scrollLeft -= singleSetWidth;
            } else if (gallery.scrollLeft <= 0) {
                gallery.scrollLeft += singleSetWidth;
            }

            lastScrollY = window.scrollY;
        };

        const onScroll = () => {
            if (animationFrame) {
                cancelAnimationFrame(animationFrame);
            }
            animationFrame = requestAnimationFrame(handleScroll);
        };

        const handleMouseDown = (e: MouseEvent) => {
            isDragging = true;
            startX = e.pageX - gallery.offsetLeft;
            scrollLeft = gallery.scrollLeft;
        };

        const handleMouseMove = (e: MouseEvent) => {
            if (!isDragging) return;
            e.preventDefault();
            const x = e.pageX - gallery.offsetLeft;
            const walk = (x - startX) * 2;
            gallery.scrollLeft = scrollLeft - walk;

            handleInfiniteScroll(e.pageX);
        };

        const handleMouseUp = () => {
            isDragging = false;
        };

        const handleTouchStart = (e: TouchEvent) => {
            isDragging = true;
            startX = e.touches[0].pageX - gallery.offsetLeft;
            scrollLeft = gallery.scrollLeft;
        };

        const handleTouchMove = (e: TouchEvent) => {
            if (!isDragging) return;
            e.preventDefault();
            const x = e.touches[0].pageX - gallery.offsetLeft;
            const walk = (x - startX) * 2;
            gallery.scrollLeft = scrollLeft - walk;

            handleInfiniteScroll(e.touches[0].pageX);
        };

        const handleTouchEnd = () => {
            isDragging = false;
        };

        const handleInfiniteScroll = (pageX: number) => {
            const singleSetWidth = gallery.scrollWidth / 3;
            if (gallery.scrollLeft >= singleSetWidth * 2) {
                gallery.scrollLeft -= singleSetWidth;
                scrollLeft = gallery.scrollLeft;
                startX = pageX - gallery.offsetLeft;
            } else if (gallery.scrollLeft <= 0) {
                gallery.scrollLeft += singleSetWidth;
                scrollLeft = gallery.scrollLeft;
                startX = pageX - gallery.offsetLeft;
            }
        };

        window.addEventListener('scroll', onScroll, { passive: true });
        
        gallery.addEventListener('mousedown', handleMouseDown);
        gallery.addEventListener('mousemove', handleMouseMove);
        gallery.addEventListener('mouseup', handleMouseUp);
        gallery.addEventListener('mouseleave', handleMouseUp);
        
        gallery.addEventListener('touchstart', handleTouchStart, { passive: false });
        gallery.addEventListener('touchmove', handleTouchMove, { passive: false });
        gallery.addEventListener('touchend', handleTouchEnd);
        gallery.addEventListener('touchcancel', handleTouchEnd);

        document.addEventListener('astro:before-swap', () => {
            window.removeEventListener('scroll', onScroll);
            
            gallery.removeEventListener('mousedown', handleMouseDown);
            gallery.removeEventListener('mousemove', handleMouseMove);
            gallery.removeEventListener('mouseup', handleMouseUp);
            gallery.removeEventListener('mouseleave', handleMouseUp);
            
            gallery.removeEventListener('touchstart', handleTouchStart);
            gallery.removeEventListener('touchmove', handleTouchMove);
            gallery.removeEventListener('touchend', handleTouchEnd);
            gallery.removeEventListener('touchcancel', handleTouchEnd);
            
            if (animationFrame) {
                cancelAnimationFrame(animationFrame);
            }
        });
    }

    initGallery();
    document.addEventListener('astro:after-swap', initGallery);
</script>